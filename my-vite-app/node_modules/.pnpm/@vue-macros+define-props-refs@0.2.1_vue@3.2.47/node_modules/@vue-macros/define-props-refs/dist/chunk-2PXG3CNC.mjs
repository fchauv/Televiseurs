// src/index.ts
import { createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";
import {
  REGEX_SETUP_SFC,
  REGEX_VUE_SFC,
  REGEX_VUE_SUB,
  detectVueVersion
} from "@vue-macros/common";

// src/core/index.ts
import {
  DEFINE_PROPS,
  DEFINE_PROPS_REFS,
  MagicString,
  WITH_DEFAULTS,
  getTransformResult,
  isCallOf,
  parseSFC,
  walkAST
} from "@vue-macros/common";
function transformDefinePropsRefs(code, id) {
  if (!code.includes(DEFINE_PROPS_REFS))
    return;
  const { scriptSetup, getSetupAst } = parseSFC(code, id);
  if (!scriptSetup)
    return;
  const offset = scriptSetup.loc.start.offset;
  const s = new MagicString(code);
  const setupAst = getSetupAst();
  let changed = false;
  walkAST(setupAst, {
    enter(node) {
      if (isCallOf(node, WITH_DEFAULTS) && node.arguments) {
        processDefinePropsRefs(node.arguments[0], node);
        this.skip();
      } else if (isCallOf(node, DEFINE_PROPS_REFS)) {
        processDefinePropsRefs(node);
      }
    }
  });
  if (changed) {
    s.prependLeft(offset, `
import { toRefs as _MACROS_toRefs } from 'vue'`);
  }
  return getTransformResult(s, id);
  function processDefinePropsRefs(propsCall, defaultsCall) {
    let code2 = `${DEFINE_PROPS}${s.slice(
      offset + propsCall.callee.end,
      offset + propsCall.end
    )}`;
    if (defaultsCall) {
      code2 = `${WITH_DEFAULTS}(${code2}, ${s.sliceNode(
        defaultsCall.arguments[1],
        {
          offset
        }
      )})`;
    }
    s.prependLeft(offset, `
const __MACROS_props = ${code2}`);
    s.overwriteNode(
      defaultsCall || propsCall,
      "_MACROS_toRefs(__MACROS_props)",
      { offset }
    );
    changed = true;
  }
}

// src/index.ts
function resolveOption(options, framework) {
  const version = options.version || detectVueVersion();
  return {
    include: [REGEX_VUE_SFC, REGEX_SETUP_SFC].concat(
      version === 2 && framework === "webpack" ? REGEX_VUE_SUB : []
    ),
    ...options,
    version
  };
}
var name = "unplugin-vue-define-props-refs";
var src_default = createUnplugin(
  (userOptions = {}, { framework }) => {
    const options = resolveOption(userOptions, framework);
    const filter = createFilter(options.include, options.exclude);
    return {
      name,
      enforce: "pre",
      transformInclude(id) {
        return filter(id);
      },
      transform(code, id) {
        try {
          return transformDefinePropsRefs(code, id);
        } catch (err) {
          this.error(`${name} ${err}`);
        }
      }
    };
  }
);

export {
  transformDefinePropsRefs,
  src_default
};
