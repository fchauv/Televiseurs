// src/index.ts
import { createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";
import {
  REGEX_SETUP_SFC,
  REGEX_VUE_SFC,
  REGEX_VUE_SUB,
  detectVueVersion
} from "@vue-macros/common";

// src/core/index.ts
import {
  DEFINE_PROPS,
  DEFINE_PROPS_DOLLAR,
  MagicString,
  getTransformResult,
  isCallOf,
  parseSFC,
  walkAST
} from "@vue-macros/common";
function transformDefineProps(code, id) {
  if (!code.includes(DEFINE_PROPS_DOLLAR))
    return;
  const { scriptSetup, getSetupAst } = parseSFC(code, id);
  if (!scriptSetup)
    return;
  const offset = scriptSetup.loc.start.offset;
  const s = new MagicString(code);
  const setupAst = getSetupAst();
  walkAST(setupAst, {
    enter(node) {
      if (isCallOf(node, DEFINE_PROPS_DOLLAR)) {
        s.overwriteNode(
          node.callee,
          // add space for fixing mapping
          ` ${DEFINE_PROPS}`,
          { offset }
        );
      }
    }
  });
  return getTransformResult(s, id);
}

// src/index.ts
function resolveOption(options, framework) {
  const version = options.version || detectVueVersion();
  return {
    include: [REGEX_VUE_SFC, REGEX_SETUP_SFC].concat(
      version === 2 && framework === "webpack" ? REGEX_VUE_SUB : []
    ),
    ...options,
    version
  };
}
var name = "unplugin-vue-define-props";
var src_default = createUnplugin(
  (userOptions = {}, { framework }) => {
    const options = resolveOption(userOptions, framework);
    const filter = createFilter(options.include, options.exclude);
    return {
      name,
      enforce: "pre",
      transformInclude(id) {
        return filter(id);
      },
      transform(code, id) {
        try {
          return transformDefineProps(code, id);
        } catch (err) {
          this.error(`${name} ${err}`);
        }
      }
    };
  }
);

export {
  transformDefineProps,
  src_default
};
