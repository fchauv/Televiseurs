// src/index.ts
import { createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";
import {
  REGEX_SETUP_SFC,
  REGEX_VUE_SFC,
  REGEX_VUE_SUB,
  detectVueVersion
} from "@vue-macros/common";

// src/core/index.ts
import {
  DEFINE_SLOTS,
  MagicString,
  getTransformResult,
  isCallOf,
  parseSFC
} from "@vue-macros/common";
function transformDefineSlots(code, id) {
  if (!code.includes(DEFINE_SLOTS))
    return;
  const { scriptSetup, getSetupAst } = parseSFC(code, id);
  if (!scriptSetup)
    return;
  const s = new MagicString(code);
  for (const stmt of getSetupAst().body) {
    if (stmt.type === "ExpressionStatement" && isCallOf(stmt.expression, DEFINE_SLOTS)) {
      s.overwriteNode(stmt, "/*defineSlots*/", {
        offset: scriptSetup.loc.start.offset
      });
    }
  }
  return getTransformResult(s, id);
}

// src/index.ts
function resolveOption(options, framework) {
  const version = options.version || detectVueVersion();
  return {
    include: [REGEX_VUE_SFC, REGEX_SETUP_SFC].concat(
      version === 2 && framework === "webpack" ? REGEX_VUE_SUB : []
    ),
    ...options,
    version
  };
}
var name = "unplugin-vue-define-slots";
var src_default = createUnplugin(
  (userOptions = {}, { framework }) => {
    const options = resolveOption(userOptions, framework);
    const filter = createFilter(options.include, options.exclude);
    return {
      name,
      enforce: "pre",
      transformInclude(id) {
        return filter(id);
      },
      transform(code, id) {
        try {
          return transformDefineSlots(code, id);
        } catch (err) {
          this.error(`${name} ${err}`);
        }
      }
    };
  }
);

export {
  src_default
};
